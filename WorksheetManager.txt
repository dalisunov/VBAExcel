VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
END
Attribute VB_Name = "WorksheetManager"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False

Option Explicit

' ------------------------------------------------------------------
' # Объявление типов данных
' ------------------------------------------------------------------

Private Type WorksheetState
    BaseManager As BaseManager
    ValidationManager As DataValidator
    DynamicTables As DynamicListObjects
    IsInitialized As Boolean
    ActiveSheet As Worksheet
    LastOperation As String
    OperationCount As Long
End Type

' ------------------------------------------------------------------
' # Переменные класса
' ------------------------------------------------------------------

Private this As WorksheetState

' ------------------------------------------------------------------
' # События
' ------------------------------------------------------------------

Public Event OnWorksheetChanged(ByVal ws As Worksheet)
Public Event OnValidationError(ByVal ErrorMessage As String)
Public Event OnOperationCompleted(ByVal OperationType As String, ByVal duration As Double)

' ------------------------------------------------------------------
' # Инициализация
' ------------------------------------------------------------------

Private Sub Class_Initialize()
    Set this.BaseManager = New BaseManager
    Set this.ValidationManager = New DataValidator
    Set this.DynamicTables = New DynamicListObjects
    this.IsInitialized = False
    this.OperationCount = 0
End Sub

Private Sub Class_Terminate()
    Set this.BaseManager = Nothing
    Set this.ValidationManager = Nothing
    Set this.DynamicTables = Nothing
    Set this.ActiveSheet = Nothing
End Sub

' ------------------------------------------------------------------
' # Основные методы
' ------------------------------------------------------------------

Public Function InitializeWorksheet(ByVal ws As Worksheet) As Boolean
    On Error GoTo ErrorHandler
    
    If ws Is Nothing Then Exit Function
    
    ' Установка активного листа
    Set this.ActiveSheet = ws
    
    ' Инициализация компонентов
    this.DynamicTables.Initialize ws
    this.IsInitialized = True
    
    ' Логирование успешной инициализации
    this.BaseManager.LogInfo "Worksheet Manager initialized for sheet: " & ws.Name
    
    InitializeWorksheet = True
    Exit Function

ErrorHandler:
    this.BaseManager.LogError "InitializeWorksheet Error: " & Err.Description
    InitializeWorksheet = False
End Function

Public Function ValidateWorksheet(ByVal ws As Worksheet) As Boolean
    On Error GoTo ErrorHandler
    
    If Not this.IsInitialized Then Exit Function
    
    ' Проверка имени листа
    If Not this.ValidationManager.ValidateWorksheetName(ws.Name) Then
        RaiseEvent OnValidationError(this.ValidationManager.GetLastValidationResultAsString())
        Exit Function
    End If
    
    ' Проверка базовых требований
    If ws.ProtectContents Or Not ws.Visible Then
        this.BaseManager.LogError "Worksheet validation failed: Sheet is protected or hidden"
        Exit Function
    End If
    
    ValidateWorksheet = True
    Exit Function

ErrorHandler:
    this.BaseManager.LogError "ValidateWorksheet Error: " & Err.Description
    ValidateWorksheet = False
End Function

Public Function ProcessWorksheetOperation(ByVal OperationType As String, ByVal Parameters As Scripting.Dictionary) As Boolean
    On Error GoTo ErrorHandler
    
    If Not this.IsInitialized Then Exit Function
    
    Dim startTime As Double
    startTime = Timer
    
    ' Выполнение операции
    Select Case OperationType
        Case "ClearContent"
            ProcessWorksheetOperation = ClearWorksheetContent(Parameters)
        Case "FormatRange"
            ProcessWorksheetOperation = FormatWorksheetRange(Parameters)
        Case "UpdateFormulas"
            ProcessWorksheetOperation = UpdateWorksheetFormulas(Parameters)
        Case Else
            this.BaseManager.LogError "Unknown operation type: " & OperationType
            Exit Function
    End Select
    
    ' Обновление статистики
    this.LastOperation = OperationType
    this.OperationCount = this.OperationCount + 1
    
    ' Событие завершения операции
    RaiseEvent OnOperationCompleted(OperationType, Timer - startTime)
    Exit Function

ErrorHandler:
    this.BaseManager.LogError "ProcessWorksheetOperation Error: " & Err.Description
    ProcessWorksheetOperation = False
End Function

' ------------------------------------------------------------------
' # Вспомогательные методы
' ------------------------------------------------------------------

Private Function ClearWorksheetContent(ByVal Parameters As Scripting.Dictionary) As Boolean
    On Error GoTo ErrorHandler
    
    If Not Parameters.exists("Range") Then Exit Function
    
    Dim targetRange As Range
    Set targetRange = this.ActiveSheet.Range(Parameters("Range"))
    
    Application.ScreenUpdating = False
    targetRange.ClearContents
    Application.ScreenUpdating = True
    
    this.BaseManager.LogInfo "Content cleared for range: " & Parameters("Range")
    ClearWorksheetContent = True
    Exit Function

ErrorHandler:
    this.BaseManager.LogError "ClearWorksheetContent Error: " & Err.Description
    ClearWorksheetContent = False
End Function

Private Function FormatWorksheetRange(ByVal Parameters As Scripting.Dictionary) As Boolean
    On Error GoTo ErrorHandler
    
    If Not Parameters.exists("Range") Or Not Parameters.exists("Format") Then Exit Function
    
    Dim targetRange As Range
    Set targetRange = this.ActiveSheet.Range(Parameters("Range"))
    
    Application.ScreenUpdating = False
    
    With targetRange
        Select Case Parameters("Format")
            Case "Number"
                .NumberFormat = Parameters("NumberFormat")
            Case "Font"
                .Font.Bold = Parameters("Bold")
                .Font.Size = Parameters("Size")
            Case "Border"
                .Borders.LineStyle = Parameters("LineStyle")
        End Select
    End With
    
    Application.ScreenUpdating = True
    
    this.BaseManager.LogInfo "Range formatted: " & Parameters("Range")
    FormatWorksheetRange = True
    Exit Function

ErrorHandler:
    this.BaseManager.LogError "FormatWorksheetRange Error: " & Err.Description
    FormatWorksheetRange = False
End Function

Private Function UpdateWorksheetFormulas(ByVal Parameters As Scripting.Dictionary) As Boolean
    On Error GoTo ErrorHandler
    
    If Not Parameters.exists("Range") Or Not Parameters.exists("Formula") Then Exit Function
    
    Dim targetRange As Range
    Set targetRange = this.ActiveSheet.Range(Parameters("Range"))
    
    Application.ScreenUpdating = False
    Application.Calculation = xlCalculationManual
    
    targetRange.Formula = Parameters("Formula")
    
    Application.Calculation = xlCalculationAutomatic
    Application.ScreenUpdating = True
    
    this.BaseManager.LogInfo "Formulas updated for range: " & Parameters("Range")
    UpdateWorksheetFormulas = True
    Exit Function

ErrorHandler:
    this.BaseManager.LogError "UpdateWorksheetFormulas Error: " & Err.Description
    UpdateWorksheetFormulas = False
End Function

' ------------------------------------------------------------------
' # Методы получения статистики
' ------------------------------------------------------------------

Public Function GetOperationStatistics() As String
    Dim stats As String
    stats = "Last Operation: " & this.LastOperation & vbCrLf
    stats = stats & "Operation Count: " & this.OperationCount & vbCrLf
    stats = stats & "Error Count: " & this.BaseManager.GetErrorCount()
    GetOperationStatistics = stats
End Function

Public Function GetWorksheetState() As Scripting.Dictionary
    Dim state As New Scripting.Dictionary
    
    If this.IsInitialized And Not this.ActiveSheet Is Nothing Then
        With state
            .Add "SheetName", this.ActiveSheet.Name
            .Add "UsedRange", this.ActiveSheet.UsedRange.Address
            .Add "TableCount", this.DynamicTables.GetCount()
            .Add "IsProtected", this.ActiveSheet.ProtectContents
            .Add "HasFormulas", this.ActiveSheet.UsedRange.HasFormula
        End With
    End If
    
    Set GetWorksheetState = state
End Function
